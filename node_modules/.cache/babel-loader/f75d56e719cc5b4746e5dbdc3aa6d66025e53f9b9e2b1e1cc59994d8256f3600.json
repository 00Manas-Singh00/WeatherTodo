{"ast":null,"code":"export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAILURE = 'REGISTER_FAILURE';\nexport const LOGOUT = 'LOGOUT';\n\n// Simulated user database\nconst users = [{\n  id: 1,\n  name: 'Demo User',\n  email: 'demo@example.com',\n  password: 'password123'\n}];\n\n// Mock login function with Redux Thunk\nexport const login = (email, password) => {\n  return dispatch => {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n\n    // Simulate API request\n    setTimeout(() => {\n      const user = users.find(user => user.email === email && user.password === password);\n      if (user) {\n        // Don't send the password to the client\n        const {\n          password,\n          ...userWithoutPassword\n        } = user;\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: userWithoutPassword\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: 'Invalid email or password'\n        });\n      }\n    }, 1000); // Simulate network delay\n  };\n};\n\n// Mock register function with Redux Thunk\nexport const register = (name, email, password) => {\n  return dispatch => {\n    dispatch({\n      type: REGISTER_REQUEST\n    });\n\n    // Simulate API request\n    setTimeout(() => {\n      // Check if user already exists\n      const userExists = users.some(user => user.email === email);\n      if (userExists) {\n        dispatch({\n          type: REGISTER_FAILURE,\n          payload: 'Email already in use'\n        });\n      } else {\n        // Create new user\n        const newUser = {\n          id: users.length + 1,\n          name,\n          email,\n          password\n        };\n\n        // In a real app, this would be an API call to create the user\n        users.push(newUser);\n\n        // Don't send the password to the client\n        const {\n          password: _,\n          ...userWithoutPassword\n        } = newUser;\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: userWithoutPassword\n        });\n      }\n    }, 1000); // Simulate network delay\n  };\n};\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","LOGOUT","users","id","name","email","password","login","dispatch","type","setTimeout","user","find","userWithoutPassword","payload","register","userExists","some","newUser","length","push","_","logout"],"sources":["/Users/manas/Desktop/quadb/src/redux/actions/authActions.js"],"sourcesContent":["export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAILURE = 'REGISTER_FAILURE';\nexport const LOGOUT = 'LOGOUT';\n\n// Simulated user database\nconst users = [\n  {\n    id: 1,\n    name: 'Demo User',\n    email: 'demo@example.com',\n    password: 'password123'\n  }\n];\n\n// Mock login function with Redux Thunk\nexport const login = (email, password) => {\n  return dispatch => {\n    dispatch({ type: LOGIN_REQUEST });\n    \n    // Simulate API request\n    setTimeout(() => {\n      const user = users.find(\n        user => user.email === email && user.password === password\n      );\n      \n      if (user) {\n        // Don't send the password to the client\n        const { password, ...userWithoutPassword } = user;\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: userWithoutPassword\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: 'Invalid email or password'\n        });\n      }\n    }, 1000); // Simulate network delay\n  };\n};\n\n// Mock register function with Redux Thunk\nexport const register = (name, email, password) => {\n  return dispatch => {\n    dispatch({ type: REGISTER_REQUEST });\n    \n    // Simulate API request\n    setTimeout(() => {\n      // Check if user already exists\n      const userExists = users.some(user => user.email === email);\n      \n      if (userExists) {\n        dispatch({\n          type: REGISTER_FAILURE,\n          payload: 'Email already in use'\n        });\n      } else {\n        // Create new user\n        const newUser = {\n          id: users.length + 1,\n          name,\n          email,\n          password\n        };\n        \n        // In a real app, this would be an API call to create the user\n        users.push(newUser);\n        \n        // Don't send the password to the client\n        const { password: _, ...userWithoutPassword } = newUser;\n        \n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: userWithoutPassword\n        });\n      }\n    }, 1000); // Simulate network delay\n  };\n};\n\nexport const logout = () => ({\n  type: LOGOUT\n});\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,MAAM,GAAG,QAAQ;;AAE9B;AACA,MAAMC,KAAK,GAAG,CACZ;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE,kBAAkB;EACzBC,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACF,KAAK,EAAEC,QAAQ,KAAK;EACxC,OAAOE,QAAQ,IAAI;IACjBA,QAAQ,CAAC;MAAEC,IAAI,EAAEd;IAAc,CAAC,CAAC;;IAEjC;IACAe,UAAU,CAAC,MAAM;MACf,MAAMC,IAAI,GAAGT,KAAK,CAACU,IAAI,CACrBD,IAAI,IAAIA,IAAI,CAACN,KAAK,KAAKA,KAAK,IAAIM,IAAI,CAACL,QAAQ,KAAKA,QACpD,CAAC;MAED,IAAIK,IAAI,EAAE;QACR;QACA,MAAM;UAAEL,QAAQ;UAAE,GAAGO;QAAoB,CAAC,GAAGF,IAAI;QACjDH,QAAQ,CAAC;UACPC,IAAI,EAAEb,aAAa;UACnBkB,OAAO,EAAED;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACLL,QAAQ,CAAC;UACPC,IAAI,EAAEZ,aAAa;UACnBiB,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACX,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACjD,OAAOE,QAAQ,IAAI;IACjBA,QAAQ,CAAC;MAAEC,IAAI,EAAEX;IAAiB,CAAC,CAAC;;IAEpC;IACAY,UAAU,CAAC,MAAM;MACf;MACA,MAAMM,UAAU,GAAGd,KAAK,CAACe,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACN,KAAK,KAAKA,KAAK,CAAC;MAE3D,IAAIW,UAAU,EAAE;QACdR,QAAQ,CAAC;UACPC,IAAI,EAAET,gBAAgB;UACtBc,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA,MAAMI,OAAO,GAAG;UACdf,EAAE,EAAED,KAAK,CAACiB,MAAM,GAAG,CAAC;UACpBf,IAAI;UACJC,KAAK;UACLC;QACF,CAAC;;QAED;QACAJ,KAAK,CAACkB,IAAI,CAACF,OAAO,CAAC;;QAEnB;QACA,MAAM;UAAEZ,QAAQ,EAAEe,CAAC;UAAE,GAAGR;QAAoB,CAAC,GAAGK,OAAO;QAEvDV,QAAQ,CAAC;UACPC,IAAI,EAAEV,gBAAgB;UACtBe,OAAO,EAAED;QACX,CAAC,CAAC;MACJ;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;AACH,CAAC;AAED,OAAO,MAAMS,MAAM,GAAGA,CAAA,MAAO;EAC3Bb,IAAI,EAAER;AACR,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}