{"ast":null,"code":"export const FETCH_WEATHER_REQUEST = 'FETCH_WEATHER_REQUEST';\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_FAILURE = 'FETCH_WEATHER_FAILURE';\nexport const fetchWeatherRequest = () => ({\n  type: FETCH_WEATHER_REQUEST\n});\nexport const fetchWeatherSuccess = data => ({\n  type: FETCH_WEATHER_SUCCESS,\n  payload: data\n});\nexport const fetchWeatherFailure = error => ({\n  type: FETCH_WEATHER_FAILURE,\n  payload: error\n});\nexport const fetchWeather = (lat, lon) => {\n  return async dispatch => {\n    dispatch(fetchWeatherRequest());\n    try {\n      const apiKey = 'a1a69a2b21b44e899c1130301252403';\n      const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&aqi=no`);\n      if (!response.ok) {\n        throw new Error('Weather data could not be fetched');\n      }\n      const data = await response.json();\n      dispatch(fetchWeatherSuccess(data));\n    } catch (error) {\n      dispatch(fetchWeatherFailure(error.message));\n      dispatch(fetchWeatherSuccess({\n        location: {\n          name: \"New York\",\n          region: \"New York\",\n          country: \"USA\",\n          lat: 40.71,\n          lon: -74.01,\n          localtime: \"2023-05-20 15:30\"\n        },\n        current: {\n          temp_c: 22,\n          temp_f: 71.6,\n          condition: {\n            text: \"Partly cloudy\",\n            icon: \"//cdn.weatherapi.com/weather/64x64/day/116.png\"\n          },\n          wind_kph: 12.6,\n          wind_mph: 7.8,\n          humidity: 65,\n          feelslike_c: 22.5,\n          feelslike_f: 72.5\n        }\n      }));\n    }\n  };\n};","map":{"version":3,"names":["FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","fetchWeatherRequest","type","fetchWeatherSuccess","data","payload","fetchWeatherFailure","error","fetchWeather","lat","lon","dispatch","apiKey","response","fetch","ok","Error","json","message","location","name","region","country","localtime","current","temp_c","temp_f","condition","text","icon","wind_kph","wind_mph","humidity","feelslike_c","feelslike_f"],"sources":["/Users/manas/Desktop/quadb/src/redux/actions/weatherActions.js"],"sourcesContent":["export const FETCH_WEATHER_REQUEST = 'FETCH_WEATHER_REQUEST';\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_FAILURE = 'FETCH_WEATHER_FAILURE';\n\nexport const fetchWeatherRequest = () => ({\n  type: FETCH_WEATHER_REQUEST\n});\n\nexport const fetchWeatherSuccess = (data) => ({\n  type: FETCH_WEATHER_SUCCESS,\n  payload: data\n});\n\nexport const fetchWeatherFailure = (error) => ({\n  type: FETCH_WEATHER_FAILURE,\n  payload: error\n});\n\nexport const fetchWeather = (lat, lon) => {\n  return async dispatch => {\n    dispatch(fetchWeatherRequest());\n    \n    try {\n      \n      const apiKey = 'a1a69a2b21b44e899c1130301252403'; \n      const response = await fetch(\n        `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&aqi=no`\n      );\n      \n      if (!response.ok) {\n        throw new Error('Weather data could not be fetched');\n      }\n      \n      const data = await response.json();\n      dispatch(fetchWeatherSuccess(data));\n    } catch (error) {\n      dispatch(fetchWeatherFailure(error.message));\n      \n      dispatch(fetchWeatherSuccess({\n        location: {\n          name: \"New York\",\n          region: \"New York\",\n          country: \"USA\",\n          lat: 40.71,\n          lon: -74.01,\n          localtime: \"2023-05-20 15:30\"\n        },\n        current: {\n          temp_c: 22,\n          temp_f: 71.6,\n          condition: {\n            text: \"Partly cloudy\",\n            icon: \"//cdn.weatherapi.com/weather/64x64/day/116.png\"\n          },\n          wind_kph: 12.6,\n          wind_mph: 7.8,\n          humidity: 65,\n          feelslike_c: 22.5,\n          feelslike_f: 72.5\n        }\n      }));\n    }\n  };\n};\n"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAE5D,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,MAAO;EACxCC,IAAI,EAAEJ;AACR,CAAC,CAAC;AAEF,OAAO,MAAMK,mBAAmB,GAAIC,IAAI,KAAM;EAC5CF,IAAI,EAAEH,qBAAqB;EAC3BM,OAAO,EAAED;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,mBAAmB,GAAIC,KAAK,KAAM;EAC7CL,IAAI,EAAEF,qBAAqB;EAC3BK,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EACxC,OAAO,MAAMC,QAAQ,IAAI;IACvBA,QAAQ,CAACV,mBAAmB,CAAC,CAAC,CAAC;IAE/B,IAAI;MAEF,MAAMW,MAAM,GAAG,iCAAiC;MAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkDF,MAAM,MAAMH,GAAG,IAAIC,GAAG,SAC1E,CAAC;MAED,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA,MAAMZ,IAAI,GAAG,MAAMS,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,QAAQ,CAACR,mBAAmB,CAACC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdI,QAAQ,CAACL,mBAAmB,CAACC,KAAK,CAACW,OAAO,CAAC,CAAC;MAE5CP,QAAQ,CAACR,mBAAmB,CAAC;QAC3BgB,QAAQ,EAAE;UACRC,IAAI,EAAE,UAAU;UAChBC,MAAM,EAAE,UAAU;UAClBC,OAAO,EAAE,KAAK;UACdb,GAAG,EAAE,KAAK;UACVC,GAAG,EAAE,CAAC,KAAK;UACXa,SAAS,EAAE;QACb,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE,EAAE;UACVC,MAAM,EAAE,IAAI;UACZC,SAAS,EAAE;YACTC,IAAI,EAAE,eAAe;YACrBC,IAAI,EAAE;UACR,CAAC;UACDC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE,GAAG;UACbC,QAAQ,EAAE,EAAE;UACZC,WAAW,EAAE,IAAI;UACjBC,WAAW,EAAE;QACf;MACF,CAAC,CAAC,CAAC;IACL;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}